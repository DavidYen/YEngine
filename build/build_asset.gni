
template("compile_flatbuffer_json") {
  schema_file = invoker.schema_file
  input_json = invoker.input_json
  output_extension = invoker.output_extension

  input_basename = get_path_info(input_json, "name")
  output_binary = "${target_gen_dir}/${input_basename}.${output_extension}"

  assert(get_path_info(input_json, "extension") == "json",
         "Flatbuffer JSON compiler must compile a .json file: ${input_json}")

  action(target_name) {
    script = "//build/compile_flatbuffer.py"
    outputs = [ output_binary ]

    args = [ "--depfile", rebase_path("${target_gen_dir}/${target_name}.d"),
             "--","flatc",
             "-o", rebase_path(get_path_info(output_binary, "dir"),
                               root_build_dir),
             "-b", rebase_path(schema_file, root_build_dir),
             rebase_path(schema_file, root_build_dir),
             rebase_path(input_json, root_build_dir)]

    deps = [
      "//third_party/build/google/flatbuffers:flatc"
    ]

    depfile = "${target_gen_dir}/${target_name}.d"
  }
}

template("compile_material") {
  compile_flatbuffer_json(target_name) {
    input_json = invoker.material_json

    schema_file = "//schemas/material.fbs"
    output_extension = "matr"
  }
}

template("compile_render_passes") {
  compile_flatbuffer_json(target_name) {
    input_json = invoker.render_passes_json

    schema_file = "//schemas/render_passes.fbs"
    output_extension = "rpas"
  }
}

template("compile_render_targets") {
  compile_flatbuffer_json(target_name) {
    input_json = invoker.render_targets_json

    schema_file = "//schemas/render_targets.fbs"
    output_extension = "rtgs"
  }
}

template("compile_render_type") {
  compile_flatbuffer_json(target_name) {
    input_json = invoker.render_type_json

    schema_file = "//schemas/render_type.fbs"
    output_extension = "rtyp"
  }
}

template("compile_vertex_declaration") {
  compile_flatbuffer_json(target_name) {
    input_json = invoker.vertex_decl_json

    schema_file = "//schemas/vertex_decl.fbs"
    output_extension = "vtxd"
  }
}

template("compile_sampler_declaration") {
  compile_flatbuffer_json(target_name) {
    input_json = invoker.sampler_json

    schema_file = "//schemas/sampler.fbs"
    output_extension = "smpl"
  }
}

template("compile_mesh") {
  action(target_name) {
    script = "//build/cmd_wrapper.py"
    mesh_file = invoker.mesh_file
    mesh_output = "${target_gen_dir}/${target_name}.mesh"

    sources = [ mesh_file ]
    outputs = [ mesh_output ]
    depfile = "${target_gen_dir}/${target_name}.d"

    args = [ "--", "ymesh_compiler",
             "--input_file", rebase_path(mesh_file, root_build_dir),
             "--output_file", rebase_path(mesh_output, root_build_dir),
             "--dep_file", rebase_path(depfile, root_build_dir) ]

    deps = [
      "//ytools/ymesh_compiler",
    ]
  }
}

template("compile_shader") {
  action(target_name) {
    script = "//build/cmd_wrapper.py"
    shader_file = invoker.shader_file
    shader_output = "${target_gen_dir}/${target_name}.shdr"

    inputs = invoker.inputs
    sources = [ shader_file ]
    outputs = [ shader_output ]
    depfile = "${target_gen_dir}/${target_name}.d"

    args = [ "--", "yshader_compiler",
             "--input_file", rebase_path(shader_file, root_build_dir),
             "--output_file", rebase_path(shader_output, root_build_dir),
             "--dep_file", rebase_path(depfile, root_build_dir) ]

    deps = [
      "//ytools/yshader_compiler",
    ]
  }
}

template("compile_texture") {
  action(target_name) {
    script = "//build/cmd_wrapper.py"
    texture_file = invoker.texture_file
    texture_output = "${target_gen_dir}/${target_name}.txtr"

    sources = [ texture_file ]
    outputs = [ texture_output ]
    depfile = "${target_gen_dir}/${target_name}.d"

    args = [ "--", "ytexture_compiler",
             "--input_file", rebase_path(texture_file, root_build_dir),
             "--output_file", rebase_path(texture_output, root_build_dir),
             "--dep_file", rebase_path(depfile, root_build_dir) ]

    deps = [
      "//ytools/ytexture_compiler",
    ]
  }
}

template("compile_bind_params") {
  action(target_name) {
    script =  "//build/cmd_wrapper.py"
    input_params_file = invoker.bind_params_file
    output_params_file = "${target_gen_dir}/${target_name}.bndp"

    outputs = [ output_params_file ]
    depfile = "${target_gen_dir}/${target_name}.d"

    args = [ "--", "yparam_data_compiler",
             "--input_file", rebase_path(input_params_file, root_build_dir),
             "--output_file", rebase_path(output_params_file, root_build_dir),
             "--dep_file", rebase_path(depfile, root_build_dir) ]

    deps = [
      "//ytools/yparam_data_compiler",
    ]
  }
}

template("compile_asset_database") {
  action(target_name) {
    script = "//ytools/yasset_database/yasset_database.py"

    sources = invoker.sources
    outputs = [ invoker.output ]

    args = [
      rebase_path("${root_build_dir}/python"),
    ] + rebase_path(outputs) + rebase_path(sources)

    deps = [
      "//ytools/yasset_database",
    ] + invoker.deps
  }
}

template("compile_module_binary") {
  action(target_name) {
    script =  "//build/cmd_wrapper.py"
    database_file = invoker.asset_database
    input_json_file = invoker.input
    output_bin_file = invoker.output

    outputs = [ output_bin_file ]
    depfile = "${target_gen_dir}/${target_name}.d"

    args = [ "--", "ymodule_binary_compiler",
             "--database_file", rebase_path(database_file, root_build_dir),
             "--input_file", rebase_path(input_json_file, root_build_dir),
             "--output_file", rebase_path(output_bin_file, root_build_dir),
             "--dep_file", rebase_path(depfile, root_build_dir) ]

    deps = [
      "//ytools/ymodule_binary_compiler",
    ] + invoker.deps
  }
}
