# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/compiler/VisualStudio/visual_studio_path.gni")

# This script outputs environment.x86 and environment.x64
exec_script("setup_environment.py", [compiler, visual_studio_path])

# Parameters:
#  cpu_arch: cpu_arch to pass as a build arg
#  environment: File name of environment file.
#  force_win64 (optional): value for this build arg.
template("vc_toolchain") {
  env = invoker.environment
  win_cmd_wrap = rebase_path("//tools/WinCmdWrap.exe", root_build_dir)

  toolchain(target_name) {
    # Make these apply to all tools below.
    # lib_switch = ""
    # lib_dir_switch="/LIBPATH:"

    tool("cc") {
      rspfile = "{{output}}.rsp"
      pdbname = "{{target_out_dir}}/{{target_output_name}}_c.pdb"
      command = "ninja -t msvc -e $env -- cl.exe /nologo /showIncludes /FC @$rspfile /c {{source}} /Fo{{output}} /Fd$pdbname"
      depsformat = "msvc"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
      ]
      description = "CC {{output}}"
      rspfile_content = "{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
    }

    tool("cxx") {
      rspfile = "{{output}}.rsp"
      # The PDB name needs to be different between C and C++ compiled files.
      pdbname = "{{target_out_dir}}/{{target_output_name}}_cc.pdb"
      command = "ninja -t msvc -e $env -- cl.exe /nologo /showIncludes /FC @$rspfile /c {{source}} /Fo{{output}} /Fd$pdbname"
      depsformat = "msvc"
      description = "CXX {{output}}"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
      ]
      rspfile_content = "{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
    }

    tool("rc") {
      command = "$win_cmd_wrap -e $env -- rc.exe {{defines}} {{include_dirs}} /fo{{output}} {{source}}"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.res",
      ]
      description = "RC {{output}}"
    }

    tool("alink") {
      rspfile = "{{output}}.rsp"
      command = "$win_cmd_wrap -e $env -- lib.exe /nologo /ignore:4221 /OUT:{{output}} @$rspfile"
      description = "LIB {{output}}"
      outputs = [
        # Ignore {{output_extension}} and always use .lib, there's no reason to
        # allow targets to override this extension on Windows.
        "{{target_out_dir}}/{{target_output_name}}.lib",
      ]
      # default_output_extension = ".lib"
      # The use of inputs_newline is to work around a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{inputs_newline}}"
    }

    tool("solink") {
      dllname = "{{target_output_name}}{{output_extension}}"  # e.g. foo.dll
      libname = "{{target_output_name}}{{output_extension}}.lib"  # e.g. foo.dll.lib
      rspfile = "${dllname}.rsp"

      command = "$win_cmd_wrap -e $env -- link.exe /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:${dllname}.pdb @$rspfile"

      # default_output_extension = ".dll"
      description = "LINK(DLL) {{output}}"
      outputs = [
        dllname,
        libname,
      ]
      # The use of inputs_newline is to work around a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{ldflags}}"
    }

    tool("link") {
      rspfile = "{{output}}.rsp"

      command = "$win_cmd_wrap -e $env -- link.exe /NOLOGO /OUT:{{output}}.exe /PDB:{{output}}.pdb @$rspfile"

      # default_output_extension = ".exe"
      description = "LINK {{output}}"
      outputs = [
        "{{target_output_name}}{{output_extension}}",
      ]
      # The use of inputs_newline is to work around a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("copy") {
      command =  "copy {{source}} {{output}}"
      description = "COPY {{source}} {{output}}"
    }

    # When invoking this toolchain not as the default one, these args will be
    # passed to the build. They are ignored when this is the default toolchain.
    toolchain_args() {
      cpu_arch = invoker.cpu_arch

      # Normally the build config resets the CPU architecture to 32-bits. Setting
      # this flag overrides that behavior.
      if (defined(invoker.force_win64)) {
        force_win64 = invoker.force_win64
      }
    }
  }
}

vc_toolchain("32") {
  environment = "environment.x86"
  cpu_arch = "x64"
}

vc_toolchain("64") {
  environment = "environment.x64"
  cpu_arch = "x64"
  force_win64 = true
}
